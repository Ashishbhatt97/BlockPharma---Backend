generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  firstName          String
  lastName           String
  email              String               @unique
  password           String
  role               Role                 @default(USER)
  phoneNumber        String?
  profilePic         String?
  isProfileCompleted Boolean              @default(false)
  isDeleted          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Address            Address?
  VendorOwner        VendorOwner?
  VendorOrganization VendorOrganization[]
  PharmacyOutlet     PharmacyOutlet[]
  Orders             Orders[]
}

model Address {
  id        String   @id @default(uuid())
  userId    String   @unique
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model VendorOwner {
  vendorId            String               @id @default(uuid())
  userId              String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  user                User                 @relation(fields: [userId], references: [id])
  VendorOrganizations VendorOrganization[]
}

model VendorOrganization {
  orgId         String      @unique @default(uuid())
  vendorOwnerId String
  businessName  String
  gstin         String      @unique
  email         String      @unique
  street        String
  city          String
  state         String
  pincode       Int
  isActive      Boolean     @default(true)
  phoneNumber   String
  website       String?
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  VendorOwner   VendorOwner @relation(fields: [vendorOwnerId], references: [vendorId])
  Orders        Orders[]
}

model PharmacyOutlet {
  pharmacyOutletId String   @id @default(uuid())
  ownerId          String
  businessName     String
  street           String
  city             String
  state            String
  pincode          String
  phoneNumber      String
  gstin            String   @unique
  email            String   @unique
  website          String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  PharmacyOwnerId  User     @relation(fields: [ownerId], references: [id])
  Orders           Orders[]
}

model Orders {
  orderId          String             @id
  userId           String
  pharmacyOutletId String
  orgId            String
  orderDate        DateTime
  orderStatus      orderStatus        @default(PENDING)
  paymentStatus    paymentStatus      @default(PENDING)
  paymentMethod    paymentMethod
  amount           Float
  currency         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
  orderedBy        PharmacyOutlet     @relation(fields: [pharmacyOutletId], references: [pharmacyOutletId])
  orderedTo        VendorOrganization @relation(fields: [orgId], references: [orgId])
  OrderItems       OrderItems[]
}

model OrderItems {
  orderItemId String   @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Orders   @relation(fields: [orderId], references: [orderId])
}

enum Role {
  USER
  ADMIN
  SUPPLIER
  PHARMACY
}

enum orderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum paymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum paymentMethod {
  CASH_ON_DELIVERY
  UPI
  CARD
  NET_BANKING
  CRYPTO
}
